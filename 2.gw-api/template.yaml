AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: REST API

Parameters:
  stage:
    Type: String
    AllowedValues: ["stage", "prod"]
  stack:
    Type: String
  fleet:
    Type: String
    Default: "gw-fleet"
  runtime:
    Type: String
    Default: "nodejs12.x"

Globals:
  Function:
    Environment:
      Variables:
        STAGE: !Sub ${stage}
        MMCONF: !Sub ${fleet}-configuration-${stage}

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${stack}-${stage}
      StageName: !Sub ${stage}
      Description: REST API
      # Authenticate users with IAM (Cognito identities)
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: NONE # Using the Lambda role instead of caller

  GameLiftPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${stack}-gamelift-policy-${stage}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: gamelift:*
            Effect: Allow
            Resource: "*"
  DynamoDbPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${stack}-dynamodb-policy-${stage}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource:
              "Fn::Join":
                - ""
                - - "arn:aws:dynamodb:"
                  - Ref: "AWS::Region"
                  - ":"
                  - Ref: "AWS::AccountId"
                  - !Sub ":table/PlayerTable-${stage}"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${stack}-lambda-role-${stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref GameLiftPolicy
        - !Ref DynamoDbPolicy

  PrivateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${stack}-private-${stage}
      CodeUri: private/
      Handler: index.handler
      Runtime: !Sub ${runtime}
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 256
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /private
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /private
            Method: post

  PublicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${stack}-public-${stage}
      CodeUri: public/
      Handler: index.handler
      Runtime: !Sub ${runtime}
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 256
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /public
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /public
            Method: post

  PlayerTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub PlayerTable-${stage}
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GraphqlApi:
    Description: "API Gateway endpoint URL for Prod stage for Graphql function"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${stage}"
  PrivateFunction:
    Description: "Graphql Lambda Function ARN"
    Value: !GetAtt PrivateFunction.Arn
  PublicFunction:
    Description: "Graphql Lambda Function ARN"
    Value: !GetAtt PublicFunction.Arn
