AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: WebSocket API

Parameters:
  stage:
    Type: String
  stack:
    Type: String
  runtime:
    Type: String
    Default: "nodejs12.x"

Globals:
  Function:
    Environment:
      Variables:
        CONNECTIONS_TABLE: !Sub ConnectionsTable-${stage}

Resources:
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${stack}-${stage}
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ExecuteApiPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${stack}-execute-api-policy-${stage}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
  DynamoDbPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${stack}-dynamodb-policy-${stage}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:Scan"
            Resource:
              "Fn::Join":
                - ""
                - - "arn:aws:dynamodb:"
                  - Ref: "AWS::Region"
                  - ":"
                  - Ref: "AWS::AccountId"
                  - !Sub ":table/ConnectionsTable-${stage}"
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${stack}-lambda-role-${stage}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref ExecuteApiPolicy
        - !Ref DynamoDbPolicy

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: AWS_IAM
      OperationName: ConnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref ConnectIntegration
  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectFunction.Arn}/invocations
  ConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ConnectFunction
      Principal: apigateway.amazonaws.com
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${stack}-connect-${stage}
      CodeUri: default/
      Handler: connect.handler
      Runtime: !Sub ${runtime}
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 128

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref DisconnectIntegration
  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DisconnectFunction.Arn}/invocations
  DisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DisconnectFunction
      Principal: apigateway.amazonaws.com
  DisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${stack}-disconnect-${stage}
      CodeUri: default/
      Handler: disconnect.handler
      Runtime: !Sub ${runtime}
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 128

  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: send
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - "/"
        - - "integrations"
          - !Ref SendIntegration
  SendIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendFunction.Arn}/invocations
  SendPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebSocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendFunction
      Principal: apigateway.amazonaws.com
  SendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${stack}-send-${stage}
      CodeUri: public/
      Handler: send.handler
      Runtime: !Sub ${runtime}
      Role: !GetAtt LambdaRole.Arn
      Timeout: 60
      MemorySize: 128

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - SendRoute
    Properties:
      ApiId: !Ref WebSocketApi
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Sub ${stage}
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebSocketApi

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ConnectionsTable-${stage}
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True

Outputs:
  ConnectionsTable:
    Value: !GetAtt ConnectionsTable.Arn

  ConnectFunction:
    Value: !GetAtt ConnectFunction.Arn
  DisconnectFunction:
    Value: !GetAtt DisconnectFunction.Arn
  SendFunction:
    Value: !GetAtt SendFunction.Arn

  WebSocketURI:
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${stage}"
